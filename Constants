
// one of the use case of enumerated constant (iota)


package main

import "fmt"

const myConst int16 = 211

const (
	a = iota
	b = iota
	c = iota
	d
	e
)

const (
	// errorSpecialist = iota 
	_ = iota	// Under-score for when we do not want to assign memory to the zero value of iota 
	catSpecialist
	dogSpecialist
	snakeSpecialist
)


const (
	_  = iota
	kb = 1 << (10 * iota)
	mb
	gb
	tb
	pb
)



func main() {
	// Constants
	// Constants can be Shadowed (both value and type)
	// iota : for enumerated(gonona) values
	const myConst int = 27
	fmt.Println(myConst)
	fmt.Println(a)
	fmt.Println(b)
	fmt.Println(c)
	fmt.Println(d)
	fmt.Println(e)
	
	
	
	// use case of iota
	filesize := 4000000000.		// use dot at last for realtively difficult number to read
	fmt.Printf("%.2fGB", filesize/gb)
	
	
	
	// another use case of iota
	var specialistType int
	fmt.Println(specialistType == catSpecialist)

}
