// use case : if we want to stor different types of data element in a same collection then we use structs

package main

import "fmt"

type Doctor struct {
	Doc
	degrees []string // data type : slice
}

type Doc struct {
	id   int
	name string
}

func main() {
	doctor_Muakkir := Doctor{}

	doctor_Muakkir.id = 32212
	doctor_Muakkir.name = "Muakkir"
	doctor_Muakkir.degrees = []string{"fcps", "ms", "frcp"}

	fmt.Println(doctor_Muakkir)
}

















// Another way
package main

import "fmt"

type Doctor struct {
	id      int      // data type : integer
	name    string   // data type : string
	degrees []string // data type : slice
}

type Doc struct {
	id   int
	name string
}


func main() {
	doctor_Muakkir := Doctor{
		id:   3011146,
		name: "Muakkir Ahmed Rabby",
		degrees: []string{
			"MBBS",
			"MS",
			"FCPS",
		},
	}

	fmt.Println(doctor_Muakkir)
	
	p1 := Doc{12, "Sabbir"}
	fmt.Println(p1)
	fmt.Println(p1.name)
}












// Using of pointers for modifying the values
// pass by reference 

package main

import "fmt"

type Person struct {
	id   int
	name string
}

func change_name(p1 *Person) {
	p1.name = "Ador"
}

func main() {
	p1 := &Person{10, "Sabbir"}
	fmt.Println(p1.name)
	change_name(p1)
	fmt.Println(p1.name)

}




// Embeded Struct  (similar to inheritance)

package main

import "fmt"

type Center_value struct {
	x int
	y int
}

type Circle struct {
	radius float64
	center *Center_value
}

func main() {

	c1 := Circle{3.4, &Center_value{2, 3}}
	fmt.Println(c1.center.x)

}


// Another way 

import "fmt"

type Animal struct {
	name   string
	origin string
}

type Bird struct {
	Animal
	speed   float32
	can_fly string
}

func main() {
	var b1 Bird = Bird{}
	b1.name = "riad"
	b1.origin = "naogaon"
	b1.speed = 0.02
	b1.can_fly = "YES"
	fmt.Println(b1)
}






// Passing struct

package main

import "fmt"

func main() {
	aDoctor := struct{ name string }{name: "Sabbir"}
	bDoctor := &aDoctor		// Using pointer while passing the struct 
	bDoctor.name = "Ador"
	fmt.Println(aDoctor)
	fmt.Println(bDoctor)
}
