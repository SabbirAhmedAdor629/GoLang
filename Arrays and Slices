
package main

import "fmt"

func main() {
	age := [...]int{20, 24, 39, 40}    //array literals (3 dots means enough space to store the data)
	age := [4]int{20, 24, 39, 40}
	fmt.Println(age)

	var students [3]string
	fmt.Printf("Students : %v\n", students)
	students[0] = "Lisa"
	fmt.Println(students[0])
	fmt.Printf("Students : %v\n", students)
	fmt.Printf("Number of Students : %v\n", len(students))  // length function to find the length
  
  
  	// 2D Array
	var identityMatrix [3][3]int = [3][3]int{{0, 0, 1}, {0, 0, 1}, {0, 0, 1}}
	fmt.Println(identityMatrix)
  
  
  	// Copy of array and pass by reference
  	a := [3]int{1, 3, 4}
	//b := a 	// copy of entire array
	b := &a 	// Using pointer reference to the same address
	b[1] = 5

	fmt.Println(a)
	fmt.Println(b)
  
  
  
  	// SLICE
	
  	a := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	b := a[:]	// slice of all the elements of a
	c := a[3:]	// slice of a from "4th element to the last one" 
	d := a[:5]	// 0th till 5th one
	e := a[3:9]	// 4th to 9th  "first number is inclusive and second number is exclusive"

	fmt.Println(a)
	fmt.Println(b)
	fmt.Println(c)
	fmt.Println(d)
	fmt.Println(e)
  
  	// SLICE using built in make function
	// Unlike arrays Slices dont have to have a fixed size 
	
	a := []int{1,2,3}
	a := make([]int, 3, 4)	// ([]type, length, capacity)
	a := []int{}
	fmt.Println(a)
	fmt.Println(len(a))
	fmt.Println(cap(a))
	a = append(a, 1)	 // built in append function to add elements, addition should be the same type
				// When we reasignd value to a existing slice,
				//it actually did create a new array (probably double the size of the previous one) (that is why sometimes the capacity increased)
	fmt.Println(a)
	fmt.Println(len(a))
	fmt.Printf("Capacity : %v", cap(a))
  

}















package main

import "fmt"

func main() {
	//age := [4]int{20, 24, 39, 40}
  age := [...]int{20, 24, 39, 40}  // using array literals (large enough to hold the data)
	fmt.Printf("Age are : %v\n", age)
  
  // age := [4]int{20, 24, 39, 40}
	// fmt.Println(age)
}
